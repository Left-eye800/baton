# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 700)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_E = QtWidgets.QMenu(self.menubar)
        self.menu_E.setObjectName("menu_E")
        self.menu_V = QtWidgets.QMenu(self.menubar)
        self.menu_V.setObjectName("menu_V")
        self.menu_S = QtWidgets.QMenu(self.menubar)
        self.menu_S.setObjectName("menu_S")
        self.menu2 = QtWidgets.QMenu(self.menu_S)
        self.menu2.setObjectName("menu2")
        self.menu_C = QtWidgets.QMenu(self.menubar)
        self.menu_C.setObjectName("menu_C")
        self.menu_H = QtWidgets.QMenu(self.menubar)
        self.menu_H.setObjectName("menu_H")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)

        self.action_open = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(r".\icons\Folder_open.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_open.setIcon(icon)
        self.action_open.setObjectName("action_open")

        self.action_open_recent = QtWidgets.QAction(MainWindow)
        self.action_open_recent.setObjectName("action_open_recent")

        self.action_save_as_docx = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(r"icons\File_Save_As.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_save_as_docx.setIcon(icon1)
        self.action_save_as_docx.setObjectName("action_save_as_docx")

        self.action_close_json_file = QtWidgets.QAction(MainWindow)
        self.action_close_json_file.setObjectName('action_close_json_file')

        self.action_exit = QtWidgets.QAction(MainWindow)
        self.action_exit.setObjectName("action_exit")
        self.action_undo = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(r"icons\Undo.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_undo.setIcon(icon2)
        self.action_undo.setObjectName("action_undo")
        self.action_redo = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(r"icons\Redo.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_redo.setIcon(icon3)
        self.action_redo.setObjectName("action_redo")

        self.action_read_or_write = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(r"icons\file_unlock.gif"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_read_or_write.setIcon(icon4)
        self.action_read_or_write.setObjectName("action_read_or_write")
        self.action_recover_no_select = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(r'icons\recover.gif'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_recover_no_select.setIcon(icon5)
        self.action_recover_no_select.setObjectName('action_recover_no_select')
        self.action_only_question = QtWidgets.QAction(MainWindow)
        self.action_only_question.setObjectName("action_only_q")
        self.action_question_preview = QtWidgets.QAction(MainWindow)
        self.action_question_preview.setObjectName("action_q_p")
        self.action_tree_question_preview = QtWidgets.QAction(MainWindow)
        self.action_tree_question_preview.setObjectName("action_t_q_p")
        self.action_question_font = QtWidgets.QAction(MainWindow)
        self.action_question_font.setObjectName("action_system_font")
        self.action_docx_font_name = QtWidgets.QAction(MainWindow)
        self.action_docx_font_name.setObjectName("action_docx_font_name")
        self.action_docx_font_size = QtWidgets.QAction(MainWindow)
        self.action_docx_font_size.setObjectName("action_docx_font_size")
        self.action_docx_paragraph_space_after = QtWidgets.QAction(MainWindow)
        self.action_docx_paragraph_space_after.setObjectName("action_docx_paragraph_space_after")
        self.action_docx_option_length = QtWidgets.QAction(MainWindow)
        self.action_docx_option_length.setObjectName("action_docx_option_interval")
        self.action_undo_count = QtWidgets.QAction(MainWindow)
        self.action_undo_count.setObjectName("action_undo_count")
        self.action_table_border_color = QtWidgets.QAction(MainWindow)
        self.action_table_border_color.setObjectName('action_table_border_color')
        self.action_generate_json_file = QtWidgets.QAction(MainWindow)
        self.action_generate_json_file.setObjectName("action_generate_json_file")
        self.action_about = QtWidgets.QAction(MainWindow)
        self.action_about.setObjectName("action_about")
        self.action_help_file = QtWidgets.QAction(MainWindow)
        self.action_help_file.setObjectName("action_help_file")

        self.action_save_json = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(r"icons\Save_File.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_save_json.setIcon(icon5)
        self.action_save_json.setObjectName("action_save_json")

        self.action_save_remark = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(r"icons\Onenote.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_save_remark.setIcon(icon6)
        self.action_save_remark.setObjectName("action_save_remark")

        self.action_exit = QtWidgets.QAction(MainWindow)
        self.action_exit.setObjectName("action_exit_2")
        self.menu.addAction(self.action_open)
        self.menu.addAction(self.action_open_recent)
        self.menu.addSeparator()
        self.menu.addAction(self.action_save_as_docx)
        self.menu.addAction(self.action_save_json)
        self.menu.addAction(self.action_save_remark)
        self.menu.addSeparator()
        self.menu.addAction(self.action_close_json_file)
        self.menu.addSeparator()
        self.menu.addAction(self.action_exit)
        self.menu_E.addAction(self.action_undo)
        self.menu_E.addAction(self.action_redo)
        self.menu_E.addAction(self.action_read_or_write)
        self.menu_V.addAction(self.action_only_question)
        self.menu_V.addAction(self.action_question_preview)
        self.menu_V.addAction(self.action_tree_question_preview)
        self.menu2.addAction(self.action_docx_font_name)
        self.menu2.addAction(self.action_docx_font_size)
        self.menu2.addAction(self.action_docx_paragraph_space_after)
        self.menu2.addAction(self.action_docx_option_length)
        self.menu_S.addAction(self.action_question_font)
        self.menu_S.addSeparator()
        self.menu_S.addAction(self.menu2.menuAction())
        self.menu_S.addSeparator()
        self.menu_S.addAction(self.action_undo_count)
        self.menu_S.addAction(self.action_table_border_color)
        self.menu_C.addAction(self.action_generate_json_file)
        self.menu_H.addAction(self.action_about)
        self.menu_H.addAction(self.action_help_file)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_E.menuAction())
        self.menubar.addAction(self.menu_V.menuAction())
        self.menubar.addAction(self.menu_S.menuAction())
        self.menubar.addAction(self.menu_C.menuAction())
        self.menubar.addAction(self.menu_H.menuAction())
        self.toolBar.addAction(self.action_open)
        self.toolBar.addAction(self.action_save_as_docx)
        self.toolBar.addAction(self.action_save_json)
        self.toolBar.addAction(self.action_save_remark)
        self.toolBar.addAction(self.action_undo)
        self.toolBar.addAction(self.action_redo)
        self.toolBar.addAction(self.action_read_or_write)
        self.toolBar.addAction(self.action_recover_no_select)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "文件(&F)"))
        self.menu_E.setTitle(_translate("MainWindow", "编辑(&E)"))
        self.menu_V.setTitle(_translate("MainWindow", "视图(V)"))
        self.menu_S.setTitle(_translate("MainWindow", "设置(S)"))
        self.menu2.setTitle(_translate("MainWindow", "docx设置"))
        self.menu_C.setTitle(_translate("MainWindow", "命令(&C)"))
        self.menu_H.setTitle(_translate("MainWindow", "帮助(&H)"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.action_open.setText(_translate("MainWindow", "打开"))
        self.action_open.setShortcut(_translate("MainWindow", "Alt+O"))
        self.action_open_recent.setText(_translate('MainWindow', '最近打开'))
        self.action_save_as_docx.setText(_translate("MainWindow", "另存为docx"))
        self.action_save_as_docx.setShortcut(_translate("MainWindow", "Alt+S"))
        self.action_exit.setText(_translate("MainWindow", "退出"))
        self.action_exit.setShortcut(_translate("MainWindow", "Alt+X"))
        self.action_undo.setText(_translate("MainWindow", "撤销"))
        self.action_undo.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.action_redo.setText(_translate("MainWindow", "重做"))
        self.action_redo.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.action_read_or_write.setText(_translate("MainWindow", "只读"))
        self.action_read_or_write.setShortcut(_translate("MainWindow", "Ctrl+T"))
        self.action_recover_no_select.setText(_translate('MainWindow', '复原未选中状态'))
        self.action_only_question.setText(_translate("MainWindow", "题目独占"))
        self.action_question_preview.setText(_translate("MainWindow", "题目-预览"))
        self.action_tree_question_preview.setText(_translate("MainWindow", "树-题目-预览"))
        self.action_question_font.setText(_translate("MainWindow", "打开文件字体"))
        self.action_question_font.setShortcut(_translate("MainWindow", "Ctrl+Shift+F"))
        self.action_undo_count.setText(_translate('MainWindow', '最大撤销次数'))
        self.action_table_border_color.setText(_translate('MainWindow', '表格边框颜色'))
        self.action_docx_font_name.setText(_translate("MainWindow", "docx字体名"))
        self.action_docx_font_size.setText(_translate("MainWindow", "docx字体大小"))
        self.action_docx_paragraph_space_after.setText(_translate("MainWindow", "docx段落间距"))
        self.action_docx_option_length.setText(_translate("MainWindow", "docx选择题选项长度"))
        self.action_generate_json_file.setText(_translate("MainWindow", "生成json文件"))
        self.action_generate_json_file.setShortcut(_translate("MainWindow", "Ctrl+G"))
        self.action_about.setText(_translate("MainWindow", "关于"))
        self.action_about.setShortcut(_translate("MainWindow", "Alt+A"))
        self.action_help_file.setText(_translate("MainWindow", "帮助文档"))
        self.action_help_file.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.action_save_json.setText(_translate('MainWindow', '保存json文件'))
        self.action_save_remark.setText(_translate("MainWindow", "保存备注"))
        self.action_save_remark.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.action_close_json_file.setText(_translate('MainWindow', '关闭文件'))
        self.action_exit.setText(_translate("MainWindow", "退出"))
        self.action_exit.setShortcut(_translate("MainWindow", "Alt+X"))
